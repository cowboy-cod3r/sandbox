#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'jar_hub_update_types'

module JarHubUpdateService
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def getServerProtocolVersion()
      send_getServerProtocolVersion()
      return recv_getServerProtocolVersion()
    end

    def send_getServerProtocolVersion()
      send_message('getServerProtocolVersion', GetServerProtocolVersion_args)
    end

    def recv_getServerProtocolVersion()
      result = receive_message(GetServerProtocolVersion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getServerProtocolVersion failed: unknown result')
    end

    def getServerApplicationVersion()
      send_getServerApplicationVersion()
      return recv_getServerApplicationVersion()
    end

    def send_getServerApplicationVersion()
      send_message('getServerApplicationVersion', GetServerApplicationVersion_args)
    end

    def recv_getServerApplicationVersion()
      result = receive_message(GetServerApplicationVersion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getServerApplicationVersion failed: unknown result')
    end

    def getServerUptime()
      send_getServerUptime()
      return recv_getServerUptime()
    end

    def send_getServerUptime()
      send_message('getServerUptime', GetServerUptime_args)
    end

    def recv_getServerUptime()
      result = receive_message(GetServerUptime_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getServerUptime failed: unknown result')
    end

    def registerClient(hostname, ip, version, timestamp)
      send_registerClient(hostname, ip, version, timestamp)
      recv_registerClient()
    end

    def send_registerClient(hostname, ip, version, timestamp)
      send_message('registerClient', RegisterClient_args, :hostname => hostname, :ip => ip, :version => version, :timestamp => timestamp)
    end

    def recv_registerClient()
      result = receive_message(RegisterClient_result)
      return
    end

    def getLatestVersion(hostname)
      send_getLatestVersion(hostname)
      return recv_getLatestVersion()
    end

    def send_getLatestVersion(hostname)
      send_message('getLatestVersion', GetLatestVersion_args, :hostname => hostname)
    end

    def recv_getLatestVersion()
      result = receive_message(GetLatestVersion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLatestVersion failed: unknown result')
    end

    def registerDebuggerClient(hostname, ip, version, timestamp)
      send_registerDebuggerClient(hostname, ip, version, timestamp)
      recv_registerDebuggerClient()
    end

    def send_registerDebuggerClient(hostname, ip, version, timestamp)
      send_message('registerDebuggerClient', RegisterDebuggerClient_args, :hostname => hostname, :ip => ip, :version => version, :timestamp => timestamp)
    end

    def recv_registerDebuggerClient()
      result = receive_message(RegisterDebuggerClient_result)
      return
    end

    def getLatestDebuggerVersion(hostname)
      send_getLatestDebuggerVersion(hostname)
      return recv_getLatestDebuggerVersion()
    end

    def send_getLatestDebuggerVersion(hostname)
      send_message('getLatestDebuggerVersion', GetLatestDebuggerVersion_args, :hostname => hostname)
    end

    def recv_getLatestDebuggerVersion()
      result = receive_message(GetLatestDebuggerVersion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLatestDebuggerVersion failed: unknown result')
    end

    def registerProxyClient(hostname, ip, version, timestamp)
      send_registerProxyClient(hostname, ip, version, timestamp)
      recv_registerProxyClient()
    end

    def send_registerProxyClient(hostname, ip, version, timestamp)
      send_message('registerProxyClient', RegisterProxyClient_args, :hostname => hostname, :ip => ip, :version => version, :timestamp => timestamp)
    end

    def recv_registerProxyClient()
      result = receive_message(RegisterProxyClient_result)
      return
    end

    def getLatestProxyVersion(hostname)
      send_getLatestProxyVersion(hostname)
      return recv_getLatestProxyVersion()
    end

    def send_getLatestProxyVersion(hostname)
      send_message('getLatestProxyVersion', GetLatestProxyVersion_args, :hostname => hostname)
    end

    def recv_getLatestProxyVersion()
      result = receive_message(GetLatestProxyVersion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getLatestProxyVersion failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_getServerProtocolVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetServerProtocolVersion_args)
      result = GetServerProtocolVersion_result.new()
      result.success = @handler.getServerProtocolVersion()
      write_result(result, oprot, 'getServerProtocolVersion', seqid)
    end

    def process_getServerApplicationVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetServerApplicationVersion_args)
      result = GetServerApplicationVersion_result.new()
      result.success = @handler.getServerApplicationVersion()
      write_result(result, oprot, 'getServerApplicationVersion', seqid)
    end

    def process_getServerUptime(seqid, iprot, oprot)
      args = read_args(iprot, GetServerUptime_args)
      result = GetServerUptime_result.new()
      result.success = @handler.getServerUptime()
      write_result(result, oprot, 'getServerUptime', seqid)
    end

    def process_registerClient(seqid, iprot, oprot)
      args = read_args(iprot, RegisterClient_args)
      result = RegisterClient_result.new()
      @handler.registerClient(args.hostname, args.ip, args.version, args.timestamp)
      write_result(result, oprot, 'registerClient', seqid)
    end

    def process_getLatestVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetLatestVersion_args)
      result = GetLatestVersion_result.new()
      result.success = @handler.getLatestVersion(args.hostname)
      write_result(result, oprot, 'getLatestVersion', seqid)
    end

    def process_registerDebuggerClient(seqid, iprot, oprot)
      args = read_args(iprot, RegisterDebuggerClient_args)
      result = RegisterDebuggerClient_result.new()
      @handler.registerDebuggerClient(args.hostname, args.ip, args.version, args.timestamp)
      write_result(result, oprot, 'registerDebuggerClient', seqid)
    end

    def process_getLatestDebuggerVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetLatestDebuggerVersion_args)
      result = GetLatestDebuggerVersion_result.new()
      result.success = @handler.getLatestDebuggerVersion(args.hostname)
      write_result(result, oprot, 'getLatestDebuggerVersion', seqid)
    end

    def process_registerProxyClient(seqid, iprot, oprot)
      args = read_args(iprot, RegisterProxyClient_args)
      result = RegisterProxyClient_result.new()
      @handler.registerProxyClient(args.hostname, args.ip, args.version, args.timestamp)
      write_result(result, oprot, 'registerProxyClient', seqid)
    end

    def process_getLatestProxyVersion(seqid, iprot, oprot)
      args = read_args(iprot, GetLatestProxyVersion_args)
      result = GetLatestProxyVersion_result.new()
      result.success = @handler.getLatestProxyVersion(args.hostname)
      write_result(result, oprot, 'getLatestProxyVersion', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerProtocolVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerProtocolVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerApplicationVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerApplicationVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerUptime_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetServerUptime_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterClient_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOSTNAME = 1
    IP = 2
    VERSION = 3
    TIMESTAMP = 4

    FIELDS = {
      HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'},
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'},
      VERSION => {:type => ::Thrift::Types::STRING, :name => 'version'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterClient_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOSTNAME = 1

    FIELDS = {
      HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VersionDescriptor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDebuggerClient_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOSTNAME = 1
    IP = 2
    VERSION = 3
    TIMESTAMP = 4

    FIELDS = {
      HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'},
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'},
      VERSION => {:type => ::Thrift::Types::STRING, :name => 'version'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterDebuggerClient_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestDebuggerVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOSTNAME = 1

    FIELDS = {
      HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestDebuggerVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VersionDescriptor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterProxyClient_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOSTNAME = 1
    IP = 2
    VERSION = 3
    TIMESTAMP = 4

    FIELDS = {
      HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'},
      IP => {:type => ::Thrift::Types::STRING, :name => 'ip'},
      VERSION => {:type => ::Thrift::Types::STRING, :name => 'version'},
      TIMESTAMP => {:type => ::Thrift::Types::I64, :name => 'timestamp'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RegisterProxyClient_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestProxyVersion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOSTNAME = 1

    FIELDS = {
      HOSTNAME => {:type => ::Thrift::Types::STRING, :name => 'hostname'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetLatestProxyVersion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::VersionDescriptor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

